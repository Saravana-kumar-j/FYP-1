"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@web3-storage";
exports.ids = ["vendor-chunks/@web3-storage"];
exports.modules = {

/***/ "(ssr)/./node_modules/@web3-storage/multipart-parser/esm/src/index.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@web3-storage/multipart-parser/esm/src/index.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   iterateMultipart: () => (/* binding */ iterateMultipart),\n/* harmony export */   streamMultipart: () => (/* binding */ streamMultipart)\n/* harmony export */ });\n/* harmony import */ var _search_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./search.js */ \"(ssr)/./node_modules/@web3-storage/multipart-parser/esm/src/search.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/@web3-storage/multipart-parser/esm/src/utils.js\");\n\n\nconst mergeArrays2 = Function.prototype.apply.bind(_utils_js__WEBPACK_IMPORTED_MODULE_1__.mergeArrays, undefined);\nconst dash = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.stringToArray)('--');\nconst CRLF = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.stringToArray)('\\r\\n');\nfunction parseContentDisposition(header) {\n  const parts = header.split(';').map(part => part.trim());\n  if (parts.shift() !== 'form-data') {\n    throw new Error('malformed content-disposition header: missing \"form-data\" in `' + JSON.stringify(parts) + '`');\n  }\n  const out = {};\n  for (const part of parts) {\n    const kv = part.split('=', 2);\n    if (kv.length !== 2) {\n      throw new Error('malformed content-disposition header: key-value pair not found - ' + part + ' in `' + header + '`');\n    }\n    const [name, value] = kv;\n    if (value[0] === '\"' && value[value.length - 1] === '\"') {\n      out[name] = value.slice(1, -1).replace(/\\\\\"/g, '\"');\n    } else if (value[0] !== '\"' && value[value.length - 1] !== '\"') {\n      out[name] = value;\n    } else if (value[0] === '\"' && value[value.length - 1] !== '\"' || value[0] !== '\"' && value[value.length - 1] === '\"') {\n      throw new Error('malformed content-disposition header: mismatched quotations in `' + header + '`');\n    }\n  }\n  if (!out.name) {\n    throw new Error('malformed content-disposition header: missing field name in `' + header + '`');\n  }\n  return out;\n}\nfunction parsePartHeaders(lines) {\n  const entries = [];\n  let disposition = false;\n  let line;\n  while (typeof (line = lines.shift()) !== 'undefined') {\n    const colon = line.indexOf(':');\n    if (colon === -1) {\n      throw new Error('malformed multipart-form header: missing colon');\n    }\n    const header = line.slice(0, colon).trim().toLowerCase();\n    const value = line.slice(colon + 1).trim();\n    switch (header) {\n    case 'content-disposition':\n      disposition = true;\n      entries.push(...Object.entries(parseContentDisposition(value)));\n      break;\n    case 'content-type':\n      entries.push([\n        'contentType',\n        value\n      ]);\n    }\n  }\n  if (!disposition) {\n    throw new Error('malformed multipart-form header: missing content-disposition');\n  }\n  return Object.fromEntries(entries);\n}\nasync function readHeaderLines(it, needle) {\n  let firstChunk = true;\n  let lastTokenWasMatch = false;\n  const headerLines = [[]];\n  const crlfSearch = new _search_js__WEBPACK_IMPORTED_MODULE_0__.StreamSearch(CRLF);\n  for (;;) {\n    const result = await it.next();\n    if (result.done) {\n      throw new Error('malformed multipart-form data: unexpected end of stream');\n    }\n    if (firstChunk && result.value !== _search_js__WEBPACK_IMPORTED_MODULE_0__.MATCH && (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.arraysEqual)(result.value.slice(0, 2), dash)) {\n      return [\n        undefined,\n        new Uint8Array()\n      ];\n    }\n    let chunk;\n    if (result.value !== _search_js__WEBPACK_IMPORTED_MODULE_0__.MATCH) {\n      chunk = result.value;\n    } else if (!lastTokenWasMatch) {\n      chunk = needle;\n    } else {\n      throw new Error('malformed multipart-form data: unexpected boundary');\n    }\n    if (!chunk.length) {\n      continue;\n    }\n    if (firstChunk) {\n      firstChunk = false;\n    }\n    const tokens = crlfSearch.feed(chunk);\n    for (const [i, token] of tokens.entries()) {\n      const isMatch = token === _search_js__WEBPACK_IMPORTED_MODULE_0__.MATCH;\n      if (!isMatch && !token.length) {\n        continue;\n      }\n      if (lastTokenWasMatch && isMatch) {\n        tokens.push(crlfSearch.end());\n        return [\n          headerLines.filter(chunks => chunks.length).map(mergeArrays2).map(_utils_js__WEBPACK_IMPORTED_MODULE_1__.arrayToString),\n          (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.mergeArrays)(...tokens.slice(i + 1).map(token => token === _search_js__WEBPACK_IMPORTED_MODULE_0__.MATCH ? CRLF : token))\n        ];\n      }\n      if (lastTokenWasMatch = isMatch) {\n        headerLines.push([]);\n      } else {\n        headerLines[headerLines.length - 1].push(token);\n      }\n    }\n  }\n}\nasync function* streamMultipart(body, boundary) {\n  const needle = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.mergeArrays)(dash, (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.stringToArray)(boundary));\n  const it = new _search_js__WEBPACK_IMPORTED_MODULE_0__.ReadableStreamSearch(needle, body)[Symbol.asyncIterator]();\n  for (;;) {\n    const result = await it.next();\n    if (result.done) {\n      return;\n    }\n    if (result.value === _search_js__WEBPACK_IMPORTED_MODULE_0__.MATCH) {\n      break;\n    }\n  }\n  const crlfSearch = new _search_js__WEBPACK_IMPORTED_MODULE_0__.StreamSearch(CRLF);\n  for (;;) {\n    const [headerLines, tail] = await readHeaderLines(it, needle);\n    if (!headerLines) {\n      return;\n    }\n    async function nextToken() {\n      const result = await it.next();\n      if (result.done) {\n        throw new Error('malformed multipart-form data: unexpected end of stream');\n      }\n      return result;\n    }\n    let trailingCRLF = false;\n    function feedChunk(chunk) {\n      const chunks = [];\n      for (const token of crlfSearch.feed(chunk)) {\n        if (trailingCRLF) {\n          chunks.push(CRLF);\n        }\n        if (!(trailingCRLF = token === _search_js__WEBPACK_IMPORTED_MODULE_0__.MATCH)) {\n          chunks.push(token);\n        }\n      }\n      return (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.mergeArrays)(...chunks);\n    }\n    let done = false;\n    async function nextChunk() {\n      const result = await nextToken();\n      let chunk;\n      if (result.value !== _search_js__WEBPACK_IMPORTED_MODULE_0__.MATCH) {\n        chunk = result.value;\n      } else if (!trailingCRLF) {\n        chunk = CRLF;\n      } else {\n        done = true;\n        return { value: crlfSearch.end() };\n      }\n      return { value: feedChunk(chunk) };\n    }\n    const bufferedChunks = [{ value: feedChunk(tail) }];\n    yield {\n      ...parsePartHeaders(headerLines),\n      data: {\n        [Symbol.asyncIterator]() {\n          return this;\n        },\n        async next() {\n          for (;;) {\n            const result = bufferedChunks.shift();\n            if (!result) {\n              break;\n            }\n            if (result.value.length > 0) {\n              return result;\n            }\n          }\n          for (;;) {\n            if (done) {\n              return {\n                done,\n                value: undefined\n              };\n            }\n            const result = await nextChunk();\n            if (result.value.length > 0) {\n              return result;\n            }\n          }\n        }\n      }\n    };\n    while (!done) {\n      bufferedChunks.push(await nextChunk());\n    }\n  }\n}\nasync function* iterateMultipart(body, boundary) {\n  for await (const part of streamMultipart(body, boundary)) {\n    const chunks = [];\n    for await (const chunk of part.data) {\n      chunks.push(chunk);\n    }\n    yield {\n      ...part,\n      data: (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.mergeArrays)(...chunks)\n    };\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@web3-storage/multipart-parser/esm/src/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@web3-storage/multipart-parser/esm/src/search.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@web3-storage/multipart-parser/esm/src/search.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MATCH: () => (/* binding */ MATCH),\n/* harmony export */   QueueableStreamSearch: () => (/* binding */ QueueableStreamSearch),\n/* harmony export */   ReadableStreamSearch: () => (/* binding */ ReadableStreamSearch),\n/* harmony export */   StreamSearch: () => (/* binding */ StreamSearch),\n/* harmony export */   allStrings: () => (/* binding */ allStrings),\n/* harmony export */   arrayIterator: () => (/* binding */ arrayIterator),\n/* harmony export */   chunksIterator: () => (/* binding */ chunksIterator),\n/* harmony export */   split: () => (/* binding */ split),\n/* harmony export */   splitChunks: () => (/* binding */ splitChunks),\n/* harmony export */   stringIterator: () => (/* binding */ stringIterator)\n/* harmony export */ });\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/@web3-storage/multipart-parser/esm/src/utils.js\");\n\nfunction coerce(a) {\n  if (a instanceof Uint8Array) {\n    return index => a[index];\n  }\n  return a;\n}\nfunction jsmemcmp(buf1, pos1, buf2, pos2, len) {\n  const fn1 = coerce(buf1);\n  const fn2 = coerce(buf2);\n  for (let i = 0; i < len; ++i) {\n    if (fn1(pos1 + i) !== fn2(pos2 + i)) {\n      return false;\n    }\n  }\n  return true;\n}\nfunction createOccurenceTable(s) {\n  const table = new Array(256).fill(s.length);\n  if (s.length > 1) {\n    for (let i = 0; i < s.length - 1; i++) {\n      table[s[i]] = s.length - 1 - i;\n    }\n  }\n  return table;\n}\nconst MATCH = Symbol('Match');\nclass StreamSearch {\n  constructor(needle) {\n    this._lookbehind = new Uint8Array();\n    if (typeof needle === 'string') {\n      this._needle = needle = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.stringToArray)(needle);\n    } else {\n      this._needle = needle;\n    }\n    this._lastChar = needle[needle.length - 1];\n    this._occ = createOccurenceTable(needle);\n  }\n  feed(chunk) {\n    let pos = 0;\n    let tokens;\n    const allTokens = [];\n    while (pos !== chunk.length) {\n      ;\n      [pos, ...tokens] = this._feed(chunk, pos);\n      allTokens.push(...tokens);\n    }\n    return allTokens;\n  }\n  end() {\n    const tail = this._lookbehind;\n    this._lookbehind = new Uint8Array();\n    return tail;\n  }\n  _feed(data, bufPos) {\n    const tokens = [];\n    let pos = -this._lookbehind.length;\n    if (pos < 0) {\n      while (pos < 0 && pos <= data.length - this._needle.length) {\n        const ch = this._charAt(data, pos + this._needle.length - 1);\n        if (ch === this._lastChar && this._memcmp(data, pos, this._needle.length - 1)) {\n          if (pos > -this._lookbehind.length) {\n            tokens.push(this._lookbehind.slice(0, this._lookbehind.length + pos));\n          }\n          tokens.push(MATCH);\n          this._lookbehind = new Uint8Array();\n          return [\n            pos + this._needle.length,\n            ...tokens\n          ];\n        } else {\n          pos += this._occ[ch];\n        }\n      }\n      if (pos < 0) {\n        while (pos < 0 && !this._memcmp(data, pos, data.length - pos)) {\n          pos++;\n        }\n      }\n      if (pos >= 0) {\n        tokens.push(this._lookbehind);\n        this._lookbehind = new Uint8Array();\n      } else {\n        const bytesToCutOff = this._lookbehind.length + pos;\n        if (bytesToCutOff > 0) {\n          tokens.push(this._lookbehind.slice(0, bytesToCutOff));\n          this._lookbehind = this._lookbehind.slice(bytesToCutOff);\n        }\n        this._lookbehind = Uint8Array.from(new Array(this._lookbehind.length + data.length), (_, i) => this._charAt(data, i - this._lookbehind.length));\n        return [\n          data.length,\n          ...tokens\n        ];\n      }\n    }\n    pos += bufPos;\n    while (pos <= data.length - this._needle.length) {\n      const ch = data[pos + this._needle.length - 1];\n      if (ch === this._lastChar && data[pos] === this._needle[0] && jsmemcmp(this._needle, 0, data, pos, this._needle.length - 1)) {\n        if (pos > bufPos) {\n          tokens.push(data.slice(bufPos, pos));\n        }\n        tokens.push(MATCH);\n        return [\n          pos + this._needle.length,\n          ...tokens\n        ];\n      } else {\n        pos += this._occ[ch];\n      }\n    }\n    if (pos < data.length) {\n      while (pos < data.length && (data[pos] !== this._needle[0] || !jsmemcmp(data, pos, this._needle, 0, data.length - pos))) {\n        ++pos;\n      }\n      if (pos < data.length) {\n        this._lookbehind = data.slice(pos);\n      }\n    }\n    if (pos > 0) {\n      tokens.push(data.slice(bufPos, pos < data.length ? pos : data.length));\n    }\n    return [\n      data.length,\n      ...tokens\n    ];\n  }\n  _charAt(data, pos) {\n    if (pos < 0) {\n      return this._lookbehind[this._lookbehind.length + pos];\n    }\n    return data[pos];\n  }\n  _memcmp(data, pos, len) {\n    return jsmemcmp(this._charAt.bind(this, data), pos, this._needle, 0, len);\n  }\n}\nclass ReadableStreamSearch {\n  constructor(needle, _readableStream) {\n    this._readableStream = _readableStream;\n    this._search = new StreamSearch(needle);\n  }\n  async *[Symbol.asyncIterator]() {\n    const reader = this._readableStream.getReader();\n    try {\n      while (true) {\n        const result = await reader.read();\n        if (result.done) {\n          break;\n        }\n        yield* this._search.feed(result.value);\n      }\n      const tail = this._search.end();\n      if (tail.length) {\n        yield tail;\n      }\n    } finally {\n      reader.releaseLock();\n    }\n  }\n}\nconst EOQ = Symbol('End of Queue');\nclass QueueableStreamSearch {\n  constructor(needle) {\n    this._chunksQueue = [];\n    this._closed = false;\n    this._search = new StreamSearch(needle);\n  }\n  push(...chunks) {\n    if (this._closed) {\n      throw new Error('cannot call push after close');\n    }\n    this._chunksQueue.push(...chunks);\n    if (this._notify) {\n      this._notify();\n    }\n  }\n  close() {\n    if (this._closed) {\n      throw new Error('close was already called');\n    }\n    this._closed = true;\n    this._chunksQueue.push(EOQ);\n    if (this._notify) {\n      this._notify();\n    }\n  }\n  async *[Symbol.asyncIterator]() {\n    while (true) {\n      let chunk;\n      while (!(chunk = this._chunksQueue.shift())) {\n        await new Promise(resolve => this._notify = resolve);\n        this._notify = undefined;\n      }\n      if (chunk === EOQ) {\n        break;\n      }\n      yield* this._search.feed(chunk);\n    }\n    const tail = this._search.end();\n    if (tail.length) {\n      yield tail;\n    }\n  }\n}\nfunction splitChunks(chunks, needle) {\n  const search = new StreamSearch(needle);\n  const outchunks = [[]];\n  for (const chunk of chunks) {\n    for (const token of search.feed(chunk)) {\n      if (token === MATCH) {\n        outchunks.push([]);\n      } else {\n        outchunks[outchunks.length - 1].push(token);\n      }\n    }\n  }\n  const end = search.end();\n  outchunks[outchunks.length - 1].push(end);\n  return outchunks.map(chunks => (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.mergeArrays)(...chunks));\n}\nfunction split(buf, needle) {\n  return splitChunks([buf], needle);\n}\nasync function* chunksIterator(iter) {\n  let chunks = [];\n  for await (const value of iter) {\n    if (value === MATCH) {\n      yield chunks;\n      chunks = [];\n    } else {\n      chunks.push(value);\n    }\n  }\n  yield chunks;\n}\nasync function* stringIterator(iter) {\n  for await (const chunk of chunksIterator(iter)) {\n    yield chunk.map(_utils_js__WEBPACK_IMPORTED_MODULE_0__.arrayToString).join('');\n  }\n}\nasync function allStrings(iter) {\n  const segments = [];\n  for await (const value of stringIterator(iter)) {\n    segments.push(value);\n  }\n  return segments;\n}\nasync function* arrayIterator(iter) {\n  for await (const chunk of chunksIterator(iter)) {\n    yield (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.mergeArrays)(...chunk);\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdlYjMtc3RvcmFnZS9tdWx0aXBhcnQtcGFyc2VyL2VzbS9zcmMvc2VhcmNoLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7O0FBSW9CO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQixTQUFTO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixrQkFBa0I7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsd0RBQWE7QUFDM0MsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQ0FBaUMsc0RBQVc7QUFDNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0Isb0RBQWE7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVUsc0RBQVc7QUFDckI7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2QtbWFuZGF0ZXMvLi9ub2RlX21vZHVsZXMvQHdlYjMtc3RvcmFnZS9tdWx0aXBhcnQtcGFyc2VyL2VzbS9zcmMvc2VhcmNoLmpzP2U4OTYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgc3RyaW5nVG9BcnJheSxcbiAgbWVyZ2VBcnJheXMsXG4gIGFycmF5VG9TdHJpbmdcbn0gZnJvbSAnLi91dGlscy5qcyc7XG5mdW5jdGlvbiBjb2VyY2UoYSkge1xuICBpZiAoYSBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkpIHtcbiAgICByZXR1cm4gaW5kZXggPT4gYVtpbmRleF07XG4gIH1cbiAgcmV0dXJuIGE7XG59XG5mdW5jdGlvbiBqc21lbWNtcChidWYxLCBwb3MxLCBidWYyLCBwb3MyLCBsZW4pIHtcbiAgY29uc3QgZm4xID0gY29lcmNlKGJ1ZjEpO1xuICBjb25zdCBmbjIgPSBjb2VyY2UoYnVmMik7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuOyArK2kpIHtcbiAgICBpZiAoZm4xKHBvczEgKyBpKSAhPT0gZm4yKHBvczIgKyBpKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZU9jY3VyZW5jZVRhYmxlKHMpIHtcbiAgY29uc3QgdGFibGUgPSBuZXcgQXJyYXkoMjU2KS5maWxsKHMubGVuZ3RoKTtcbiAgaWYgKHMubGVuZ3RoID4gMSkge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcy5sZW5ndGggLSAxOyBpKyspIHtcbiAgICAgIHRhYmxlW3NbaV1dID0gcy5sZW5ndGggLSAxIC0gaTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRhYmxlO1xufVxuY29uc3QgTUFUQ0ggPSBTeW1ib2woJ01hdGNoJyk7XG5jbGFzcyBTdHJlYW1TZWFyY2gge1xuICBjb25zdHJ1Y3RvcihuZWVkbGUpIHtcbiAgICB0aGlzLl9sb29rYmVoaW5kID0gbmV3IFVpbnQ4QXJyYXkoKTtcbiAgICBpZiAodHlwZW9mIG5lZWRsZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHRoaXMuX25lZWRsZSA9IG5lZWRsZSA9IHN0cmluZ1RvQXJyYXkobmVlZGxlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fbmVlZGxlID0gbmVlZGxlO1xuICAgIH1cbiAgICB0aGlzLl9sYXN0Q2hhciA9IG5lZWRsZVtuZWVkbGUubGVuZ3RoIC0gMV07XG4gICAgdGhpcy5fb2NjID0gY3JlYXRlT2NjdXJlbmNlVGFibGUobmVlZGxlKTtcbiAgfVxuICBmZWVkKGNodW5rKSB7XG4gICAgbGV0IHBvcyA9IDA7XG4gICAgbGV0IHRva2VucztcbiAgICBjb25zdCBhbGxUb2tlbnMgPSBbXTtcbiAgICB3aGlsZSAocG9zICE9PSBjaHVuay5sZW5ndGgpIHtcbiAgICAgIDtcbiAgICAgIFtwb3MsIC4uLnRva2Vuc10gPSB0aGlzLl9mZWVkKGNodW5rLCBwb3MpO1xuICAgICAgYWxsVG9rZW5zLnB1c2goLi4udG9rZW5zKTtcbiAgICB9XG4gICAgcmV0dXJuIGFsbFRva2VucztcbiAgfVxuICBlbmQoKSB7XG4gICAgY29uc3QgdGFpbCA9IHRoaXMuX2xvb2tiZWhpbmQ7XG4gICAgdGhpcy5fbG9va2JlaGluZCA9IG5ldyBVaW50OEFycmF5KCk7XG4gICAgcmV0dXJuIHRhaWw7XG4gIH1cbiAgX2ZlZWQoZGF0YSwgYnVmUG9zKSB7XG4gICAgY29uc3QgdG9rZW5zID0gW107XG4gICAgbGV0IHBvcyA9IC10aGlzLl9sb29rYmVoaW5kLmxlbmd0aDtcbiAgICBpZiAocG9zIDwgMCkge1xuICAgICAgd2hpbGUgKHBvcyA8IDAgJiYgcG9zIDw9IGRhdGEubGVuZ3RoIC0gdGhpcy5fbmVlZGxlLmxlbmd0aCkge1xuICAgICAgICBjb25zdCBjaCA9IHRoaXMuX2NoYXJBdChkYXRhLCBwb3MgKyB0aGlzLl9uZWVkbGUubGVuZ3RoIC0gMSk7XG4gICAgICAgIGlmIChjaCA9PT0gdGhpcy5fbGFzdENoYXIgJiYgdGhpcy5fbWVtY21wKGRhdGEsIHBvcywgdGhpcy5fbmVlZGxlLmxlbmd0aCAtIDEpKSB7XG4gICAgICAgICAgaWYgKHBvcyA+IC10aGlzLl9sb29rYmVoaW5kLmxlbmd0aCkge1xuICAgICAgICAgICAgdG9rZW5zLnB1c2godGhpcy5fbG9va2JlaGluZC5zbGljZSgwLCB0aGlzLl9sb29rYmVoaW5kLmxlbmd0aCArIHBvcykpO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0b2tlbnMucHVzaChNQVRDSCk7XG4gICAgICAgICAgdGhpcy5fbG9va2JlaGluZCA9IG5ldyBVaW50OEFycmF5KCk7XG4gICAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgIHBvcyArIHRoaXMuX25lZWRsZS5sZW5ndGgsXG4gICAgICAgICAgICAuLi50b2tlbnNcbiAgICAgICAgICBdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBvcyArPSB0aGlzLl9vY2NbY2hdO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAocG9zIDwgMCkge1xuICAgICAgICB3aGlsZSAocG9zIDwgMCAmJiAhdGhpcy5fbWVtY21wKGRhdGEsIHBvcywgZGF0YS5sZW5ndGggLSBwb3MpKSB7XG4gICAgICAgICAgcG9zKys7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChwb3MgPj0gMCkge1xuICAgICAgICB0b2tlbnMucHVzaCh0aGlzLl9sb29rYmVoaW5kKTtcbiAgICAgICAgdGhpcy5fbG9va2JlaGluZCA9IG5ldyBVaW50OEFycmF5KCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCBieXRlc1RvQ3V0T2ZmID0gdGhpcy5fbG9va2JlaGluZC5sZW5ndGggKyBwb3M7XG4gICAgICAgIGlmIChieXRlc1RvQ3V0T2ZmID4gMCkge1xuICAgICAgICAgIHRva2Vucy5wdXNoKHRoaXMuX2xvb2tiZWhpbmQuc2xpY2UoMCwgYnl0ZXNUb0N1dE9mZikpO1xuICAgICAgICAgIHRoaXMuX2xvb2tiZWhpbmQgPSB0aGlzLl9sb29rYmVoaW5kLnNsaWNlKGJ5dGVzVG9DdXRPZmYpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2xvb2tiZWhpbmQgPSBVaW50OEFycmF5LmZyb20obmV3IEFycmF5KHRoaXMuX2xvb2tiZWhpbmQubGVuZ3RoICsgZGF0YS5sZW5ndGgpLCAoXywgaSkgPT4gdGhpcy5fY2hhckF0KGRhdGEsIGkgLSB0aGlzLl9sb29rYmVoaW5kLmxlbmd0aCkpO1xuICAgICAgICByZXR1cm4gW1xuICAgICAgICAgIGRhdGEubGVuZ3RoLFxuICAgICAgICAgIC4uLnRva2Vuc1xuICAgICAgICBdO1xuICAgICAgfVxuICAgIH1cbiAgICBwb3MgKz0gYnVmUG9zO1xuICAgIHdoaWxlIChwb3MgPD0gZGF0YS5sZW5ndGggLSB0aGlzLl9uZWVkbGUubGVuZ3RoKSB7XG4gICAgICBjb25zdCBjaCA9IGRhdGFbcG9zICsgdGhpcy5fbmVlZGxlLmxlbmd0aCAtIDFdO1xuICAgICAgaWYgKGNoID09PSB0aGlzLl9sYXN0Q2hhciAmJiBkYXRhW3Bvc10gPT09IHRoaXMuX25lZWRsZVswXSAmJiBqc21lbWNtcCh0aGlzLl9uZWVkbGUsIDAsIGRhdGEsIHBvcywgdGhpcy5fbmVlZGxlLmxlbmd0aCAtIDEpKSB7XG4gICAgICAgIGlmIChwb3MgPiBidWZQb3MpIHtcbiAgICAgICAgICB0b2tlbnMucHVzaChkYXRhLnNsaWNlKGJ1ZlBvcywgcG9zKSk7XG4gICAgICAgIH1cbiAgICAgICAgdG9rZW5zLnB1c2goTUFUQ0gpO1xuICAgICAgICByZXR1cm4gW1xuICAgICAgICAgIHBvcyArIHRoaXMuX25lZWRsZS5sZW5ndGgsXG4gICAgICAgICAgLi4udG9rZW5zXG4gICAgICAgIF07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwb3MgKz0gdGhpcy5fb2NjW2NoXTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHBvcyA8IGRhdGEubGVuZ3RoKSB7XG4gICAgICB3aGlsZSAocG9zIDwgZGF0YS5sZW5ndGggJiYgKGRhdGFbcG9zXSAhPT0gdGhpcy5fbmVlZGxlWzBdIHx8ICFqc21lbWNtcChkYXRhLCBwb3MsIHRoaXMuX25lZWRsZSwgMCwgZGF0YS5sZW5ndGggLSBwb3MpKSkge1xuICAgICAgICArK3BvcztcbiAgICAgIH1cbiAgICAgIGlmIChwb3MgPCBkYXRhLmxlbmd0aCkge1xuICAgICAgICB0aGlzLl9sb29rYmVoaW5kID0gZGF0YS5zbGljZShwb3MpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAocG9zID4gMCkge1xuICAgICAgdG9rZW5zLnB1c2goZGF0YS5zbGljZShidWZQb3MsIHBvcyA8IGRhdGEubGVuZ3RoID8gcG9zIDogZGF0YS5sZW5ndGgpKTtcbiAgICB9XG4gICAgcmV0dXJuIFtcbiAgICAgIGRhdGEubGVuZ3RoLFxuICAgICAgLi4udG9rZW5zXG4gICAgXTtcbiAgfVxuICBfY2hhckF0KGRhdGEsIHBvcykge1xuICAgIGlmIChwb3MgPCAwKSB7XG4gICAgICByZXR1cm4gdGhpcy5fbG9va2JlaGluZFt0aGlzLl9sb29rYmVoaW5kLmxlbmd0aCArIHBvc107XG4gICAgfVxuICAgIHJldHVybiBkYXRhW3Bvc107XG4gIH1cbiAgX21lbWNtcChkYXRhLCBwb3MsIGxlbikge1xuICAgIHJldHVybiBqc21lbWNtcCh0aGlzLl9jaGFyQXQuYmluZCh0aGlzLCBkYXRhKSwgcG9zLCB0aGlzLl9uZWVkbGUsIDAsIGxlbik7XG4gIH1cbn1cbmNsYXNzIFJlYWRhYmxlU3RyZWFtU2VhcmNoIHtcbiAgY29uc3RydWN0b3IobmVlZGxlLCBfcmVhZGFibGVTdHJlYW0pIHtcbiAgICB0aGlzLl9yZWFkYWJsZVN0cmVhbSA9IF9yZWFkYWJsZVN0cmVhbTtcbiAgICB0aGlzLl9zZWFyY2ggPSBuZXcgU3RyZWFtU2VhcmNoKG5lZWRsZSk7XG4gIH1cbiAgYXN5bmMgKltTeW1ib2wuYXN5bmNJdGVyYXRvcl0oKSB7XG4gICAgY29uc3QgcmVhZGVyID0gdGhpcy5fcmVhZGFibGVTdHJlYW0uZ2V0UmVhZGVyKCk7XG4gICAgdHJ5IHtcbiAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHJlYWRlci5yZWFkKCk7XG4gICAgICAgIGlmIChyZXN1bHQuZG9uZSkge1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIHlpZWxkKiB0aGlzLl9zZWFyY2guZmVlZChyZXN1bHQudmFsdWUpO1xuICAgICAgfVxuICAgICAgY29uc3QgdGFpbCA9IHRoaXMuX3NlYXJjaC5lbmQoKTtcbiAgICAgIGlmICh0YWlsLmxlbmd0aCkge1xuICAgICAgICB5aWVsZCB0YWlsO1xuICAgICAgfVxuICAgIH0gZmluYWxseSB7XG4gICAgICByZWFkZXIucmVsZWFzZUxvY2soKTtcbiAgICB9XG4gIH1cbn1cbmNvbnN0IEVPUSA9IFN5bWJvbCgnRW5kIG9mIFF1ZXVlJyk7XG5jbGFzcyBRdWV1ZWFibGVTdHJlYW1TZWFyY2gge1xuICBjb25zdHJ1Y3RvcihuZWVkbGUpIHtcbiAgICB0aGlzLl9jaHVua3NRdWV1ZSA9IFtdO1xuICAgIHRoaXMuX2Nsb3NlZCA9IGZhbHNlO1xuICAgIHRoaXMuX3NlYXJjaCA9IG5ldyBTdHJlYW1TZWFyY2gobmVlZGxlKTtcbiAgfVxuICBwdXNoKC4uLmNodW5rcykge1xuICAgIGlmICh0aGlzLl9jbG9zZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignY2Fubm90IGNhbGwgcHVzaCBhZnRlciBjbG9zZScpO1xuICAgIH1cbiAgICB0aGlzLl9jaHVua3NRdWV1ZS5wdXNoKC4uLmNodW5rcyk7XG4gICAgaWYgKHRoaXMuX25vdGlmeSkge1xuICAgICAgdGhpcy5fbm90aWZ5KCk7XG4gICAgfVxuICB9XG4gIGNsb3NlKCkge1xuICAgIGlmICh0aGlzLl9jbG9zZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignY2xvc2Ugd2FzIGFscmVhZHkgY2FsbGVkJyk7XG4gICAgfVxuICAgIHRoaXMuX2Nsb3NlZCA9IHRydWU7XG4gICAgdGhpcy5fY2h1bmtzUXVldWUucHVzaChFT1EpO1xuICAgIGlmICh0aGlzLl9ub3RpZnkpIHtcbiAgICAgIHRoaXMuX25vdGlmeSgpO1xuICAgIH1cbiAgfVxuICBhc3luYyAqW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSgpIHtcbiAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgbGV0IGNodW5rO1xuICAgICAgd2hpbGUgKCEoY2h1bmsgPSB0aGlzLl9jaHVua3NRdWV1ZS5zaGlmdCgpKSkge1xuICAgICAgICBhd2FpdCBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHRoaXMuX25vdGlmeSA9IHJlc29sdmUpO1xuICAgICAgICB0aGlzLl9ub3RpZnkgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICBpZiAoY2h1bmsgPT09IEVPUSkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIHlpZWxkKiB0aGlzLl9zZWFyY2guZmVlZChjaHVuayk7XG4gICAgfVxuICAgIGNvbnN0IHRhaWwgPSB0aGlzLl9zZWFyY2guZW5kKCk7XG4gICAgaWYgKHRhaWwubGVuZ3RoKSB7XG4gICAgICB5aWVsZCB0YWlsO1xuICAgIH1cbiAgfVxufVxuZnVuY3Rpb24gc3BsaXRDaHVua3MoY2h1bmtzLCBuZWVkbGUpIHtcbiAgY29uc3Qgc2VhcmNoID0gbmV3IFN0cmVhbVNlYXJjaChuZWVkbGUpO1xuICBjb25zdCBvdXRjaHVua3MgPSBbW11dO1xuICBmb3IgKGNvbnN0IGNodW5rIG9mIGNodW5rcykge1xuICAgIGZvciAoY29uc3QgdG9rZW4gb2Ygc2VhcmNoLmZlZWQoY2h1bmspKSB7XG4gICAgICBpZiAodG9rZW4gPT09IE1BVENIKSB7XG4gICAgICAgIG91dGNodW5rcy5wdXNoKFtdKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG91dGNodW5rc1tvdXRjaHVua3MubGVuZ3RoIC0gMV0ucHVzaCh0b2tlbik7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGNvbnN0IGVuZCA9IHNlYXJjaC5lbmQoKTtcbiAgb3V0Y2h1bmtzW291dGNodW5rcy5sZW5ndGggLSAxXS5wdXNoKGVuZCk7XG4gIHJldHVybiBvdXRjaHVua3MubWFwKGNodW5rcyA9PiBtZXJnZUFycmF5cyguLi5jaHVua3MpKTtcbn1cbmZ1bmN0aW9uIHNwbGl0KGJ1ZiwgbmVlZGxlKSB7XG4gIHJldHVybiBzcGxpdENodW5rcyhbYnVmXSwgbmVlZGxlKTtcbn1cbmFzeW5jIGZ1bmN0aW9uKiBjaHVua3NJdGVyYXRvcihpdGVyKSB7XG4gIGxldCBjaHVua3MgPSBbXTtcbiAgZm9yIGF3YWl0IChjb25zdCB2YWx1ZSBvZiBpdGVyKSB7XG4gICAgaWYgKHZhbHVlID09PSBNQVRDSCkge1xuICAgICAgeWllbGQgY2h1bmtzO1xuICAgICAgY2h1bmtzID0gW107XG4gICAgfSBlbHNlIHtcbiAgICAgIGNodW5rcy5wdXNoKHZhbHVlKTtcbiAgICB9XG4gIH1cbiAgeWllbGQgY2h1bmtzO1xufVxuYXN5bmMgZnVuY3Rpb24qIHN0cmluZ0l0ZXJhdG9yKGl0ZXIpIHtcbiAgZm9yIGF3YWl0IChjb25zdCBjaHVuayBvZiBjaHVua3NJdGVyYXRvcihpdGVyKSkge1xuICAgIHlpZWxkIGNodW5rLm1hcChhcnJheVRvU3RyaW5nKS5qb2luKCcnKTtcbiAgfVxufVxuYXN5bmMgZnVuY3Rpb24gYWxsU3RyaW5ncyhpdGVyKSB7XG4gIGNvbnN0IHNlZ21lbnRzID0gW107XG4gIGZvciBhd2FpdCAoY29uc3QgdmFsdWUgb2Ygc3RyaW5nSXRlcmF0b3IoaXRlcikpIHtcbiAgICBzZWdtZW50cy5wdXNoKHZhbHVlKTtcbiAgfVxuICByZXR1cm4gc2VnbWVudHM7XG59XG5hc3luYyBmdW5jdGlvbiogYXJyYXlJdGVyYXRvcihpdGVyKSB7XG4gIGZvciBhd2FpdCAoY29uc3QgY2h1bmsgb2YgY2h1bmtzSXRlcmF0b3IoaXRlcikpIHtcbiAgICB5aWVsZCBtZXJnZUFycmF5cyguLi5jaHVuayk7XG4gIH1cbn1cbmV4cG9ydCB7XG4gIE1BVENILFxuICBRdWV1ZWFibGVTdHJlYW1TZWFyY2gsXG4gIFJlYWRhYmxlU3RyZWFtU2VhcmNoLFxuICBTdHJlYW1TZWFyY2gsXG4gIGFsbFN0cmluZ3MsXG4gIGFycmF5SXRlcmF0b3IsXG4gIGNodW5rc0l0ZXJhdG9yLFxuICBzcGxpdCxcbiAgc3BsaXRDaHVua3MsXG4gIHN0cmluZ0l0ZXJhdG9yXG59OyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@web3-storage/multipart-parser/esm/src/search.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@web3-storage/multipart-parser/esm/src/utils.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@web3-storage/multipart-parser/esm/src/utils.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   arrayToString: () => (/* binding */ arrayToString),\n/* harmony export */   arraysEqual: () => (/* binding */ arraysEqual),\n/* harmony export */   mergeArrays: () => (/* binding */ mergeArrays),\n/* harmony export */   stringToArray: () => (/* binding */ stringToArray)\n/* harmony export */ });\nfunction stringToArray(s) {\n  const utf8 = unescape(encodeURIComponent(s));\n  return Uint8Array.from(utf8, (_, i) => utf8.charCodeAt(i));\n}\nfunction arrayToString(a) {\n  const utf8 = String.fromCharCode.apply(null, a);\n  return decodeURIComponent(escape(utf8));\n}\nfunction mergeArrays(...arrays) {\n  const out = new Uint8Array(arrays.reduce((total, arr) => total + arr.length, 0));\n  let offset = 0;\n  for (const arr of arrays) {\n    out.set(arr, offset);\n    offset += arr.length;\n  }\n  return out;\n}\nfunction arraysEqual(a, b) {\n  if (a.length !== b.length) {\n    return false;\n  }\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] !== b[i]) {\n      return false;\n    }\n  }\n  return true;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdlYjMtc3RvcmFnZS9tdWx0aXBhcnQtcGFyc2VyL2VzbS9zcmMvdXRpbHMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQixjQUFjO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2QtbWFuZGF0ZXMvLi9ub2RlX21vZHVsZXMvQHdlYjMtc3RvcmFnZS9tdWx0aXBhcnQtcGFyc2VyL2VzbS9zcmMvdXRpbHMuanM/YTQzZiJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZnVuY3Rpb24gc3RyaW5nVG9BcnJheShzKSB7XG4gIGNvbnN0IHV0ZjggPSB1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQocykpO1xuICByZXR1cm4gVWludDhBcnJheS5mcm9tKHV0ZjgsIChfLCBpKSA9PiB1dGY4LmNoYXJDb2RlQXQoaSkpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGFycmF5VG9TdHJpbmcoYSkge1xuICBjb25zdCB1dGY4ID0gU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShudWxsLCBhKTtcbiAgcmV0dXJuIGRlY29kZVVSSUNvbXBvbmVudChlc2NhcGUodXRmOCkpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIG1lcmdlQXJyYXlzKC4uLmFycmF5cykge1xuICBjb25zdCBvdXQgPSBuZXcgVWludDhBcnJheShhcnJheXMucmVkdWNlKCh0b3RhbCwgYXJyKSA9PiB0b3RhbCArIGFyci5sZW5ndGgsIDApKTtcbiAgbGV0IG9mZnNldCA9IDA7XG4gIGZvciAoY29uc3QgYXJyIG9mIGFycmF5cykge1xuICAgIG91dC5zZXQoYXJyLCBvZmZzZXQpO1xuICAgIG9mZnNldCArPSBhcnIubGVuZ3RoO1xuICB9XG4gIHJldHVybiBvdXQ7XG59XG5leHBvcnQgZnVuY3Rpb24gYXJyYXlzRXF1YWwoYSwgYikge1xuICBpZiAoYS5sZW5ndGggIT09IGIubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgYS5sZW5ndGg7IGkrKykge1xuICAgIGlmIChhW2ldICE9PSBiW2ldKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG4gIHJldHVybiB0cnVlO1xufSJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@web3-storage/multipart-parser/esm/src/utils.js\n");

/***/ })

};
;
"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/dashboard/farmer/page",{

/***/ "(app-pages-browser)/./Utils/web3storage.js":
/*!******************************!*\
  !*** ./Utils/web3storage.js ***!
  \******************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fetchFromIPFS: function() { return /* binding */ fetchFromIPFS; },\n/* harmony export */   listStoredCIDs: function() { return /* binding */ listStoredCIDs; },\n/* harmony export */   uploadToIPFS: function() { return /* binding */ uploadToIPFS; }\n/* harmony export */ });\n// Simple IPFS storage implementation using localStorage\n// This is a placeholder implementation that doesn't actually store data on IPFS\n// In a production environment, you would use a real IPFS service\n// Function to upload data to IPFS (mock implementation)\nconst uploadToIPFS = async (data)=>{\n    try {\n        // Generate a unique CID-like identifier\n        const mockCID = \"mock-\".concat(Date.now(), \"-\").concat(Math.random().toString(36).substring(2, 15));\n        // Store the data in localStorage for retrieval\n        const storedData = {\n            cid: mockCID,\n            timestamp: Date.now(),\n            data: data\n        };\n        // Get existing stored CIDs or initialize empty array\n        const storedCIDs = JSON.parse(localStorage.getItem(\"ipfs_cids\") || \"[]\");\n        storedCIDs.push(storedData);\n        localStorage.setItem(\"ipfs_cids\", JSON.stringify(storedCIDs));\n        console.log(\"Data stored locally with ID: \".concat(mockCID));\n        console.log('View your data in the \"Stored IPFS Data\" section');\n        // Return the CID\n        return mockCID;\n    } catch (error) {\n        console.error(\"Upload failed:\", error);\n        throw new Error(\"Storage error: \" + error.message);\n    }\n};\n// Function to fetch data from IPFS (mock implementation)\nconst fetchFromIPFS = async (cid)=>{\n    try {\n        // Get from localStorage\n        const storedCIDs = JSON.parse(localStorage.getItem(\"ipfs_cids\") || \"[]\");\n        const storedData = storedCIDs.find((item)=>item.cid === cid);\n        if (!storedData) {\n            throw new Error(\"Data not found\");\n        }\n        console.log(\"Data retrieved from local storage for ID: \".concat(cid));\n        return storedData.data;\n    } catch (error) {\n        console.error(\"Fetch error:\", error);\n        throw error;\n    }\n};\n// Function to list all stored CIDs\nconst listStoredCIDs = ()=>{\n    try {\n        const storedCIDs = JSON.parse(localStorage.getItem(\"ipfs_cids\") || \"[]\");\n        return storedCIDs.map((item)=>({\n                cid: item.cid,\n                timestamp: item.timestamp,\n                date: new Date(item.timestamp).toLocaleString()\n            }));\n    } catch (error) {\n        console.error(\"Error listing CIDs:\", error);\n        return [];\n    }\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL1V0aWxzL3dlYjNzdG9yYWdlLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLHdEQUF3RDtBQUN4RCxnRkFBZ0Y7QUFDaEYsaUVBQWlFO0FBRWpFLHdEQUF3RDtBQUNqRCxNQUFNQSxlQUFlLE9BQU9DO0lBQ2pDLElBQUk7UUFDRix3Q0FBd0M7UUFDeEMsTUFBTUMsVUFBVSxRQUFzQkMsT0FBZEMsS0FBS0MsR0FBRyxJQUFHLEtBQStDLE9BQTVDRixLQUFLRyxNQUFNLEdBQUdDLFFBQVEsQ0FBQyxJQUFJQyxTQUFTLENBQUMsR0FBRztRQUU5RSwrQ0FBK0M7UUFDL0MsTUFBTUMsYUFBYTtZQUNqQkMsS0FBS1I7WUFDTFMsV0FBV1AsS0FBS0MsR0FBRztZQUNuQkosTUFBTUE7UUFDUjtRQUVBLHFEQUFxRDtRQUNyRCxNQUFNVyxhQUFhQyxLQUFLQyxLQUFLLENBQUNDLGFBQWFDLE9BQU8sQ0FBQyxnQkFBZ0I7UUFDbkVKLFdBQVdLLElBQUksQ0FBQ1I7UUFDaEJNLGFBQWFHLE9BQU8sQ0FBQyxhQUFhTCxLQUFLTSxTQUFTLENBQUNQO1FBRWpEUSxRQUFRQyxHQUFHLENBQUMsZ0NBQXdDLE9BQVJuQjtRQUM1Q2tCLFFBQVFDLEdBQUcsQ0FBRTtRQUViLGlCQUFpQjtRQUNqQixPQUFPbkI7SUFFVCxFQUFFLE9BQU9vQixPQUFPO1FBQ2RGLFFBQVFFLEtBQUssQ0FBQyxrQkFBa0JBO1FBQ2hDLE1BQU0sSUFBSUMsTUFBTSxvQkFBb0JELE1BQU1FLE9BQU87SUFDbkQ7QUFDRixFQUFFO0FBRUYseURBQXlEO0FBQ2xELE1BQU1DLGdCQUFnQixPQUFPZjtJQUNsQyxJQUFJO1FBQ0Ysd0JBQXdCO1FBQ3hCLE1BQU1FLGFBQWFDLEtBQUtDLEtBQUssQ0FBQ0MsYUFBYUMsT0FBTyxDQUFDLGdCQUFnQjtRQUNuRSxNQUFNUCxhQUFhRyxXQUFXYyxJQUFJLENBQUNDLENBQUFBLE9BQVFBLEtBQUtqQixHQUFHLEtBQUtBO1FBRXhELElBQUksQ0FBQ0QsWUFBWTtZQUNmLE1BQU0sSUFBSWMsTUFBTTtRQUNsQjtRQUVBSCxRQUFRQyxHQUFHLENBQUMsNkNBQWlELE9BQUpYO1FBQ3pELE9BQU9ELFdBQVdSLElBQUk7SUFDeEIsRUFBRSxPQUFPcUIsT0FBTztRQUNkRixRQUFRRSxLQUFLLENBQUMsZ0JBQWdCQTtRQUM5QixNQUFNQTtJQUNSO0FBQ0YsRUFBRTtBQUVGLG1DQUFtQztBQUM1QixNQUFNTSxpQkFBaUI7SUFDNUIsSUFBSTtRQUNGLE1BQU1oQixhQUFhQyxLQUFLQyxLQUFLLENBQUNDLGFBQWFDLE9BQU8sQ0FBQyxnQkFBZ0I7UUFDbkUsT0FBT0osV0FBV2lCLEdBQUcsQ0FBQ0YsQ0FBQUEsT0FBUztnQkFDN0JqQixLQUFLaUIsS0FBS2pCLEdBQUc7Z0JBQ2JDLFdBQVdnQixLQUFLaEIsU0FBUztnQkFDekJtQixNQUFNLElBQUkxQixLQUFLdUIsS0FBS2hCLFNBQVMsRUFBRW9CLGNBQWM7WUFDL0M7SUFDRixFQUFFLE9BQU9ULE9BQU87UUFDZEYsUUFBUUUsS0FBSyxDQUFDLHVCQUF1QkE7UUFDckMsT0FBTyxFQUFFO0lBQ1g7QUFDRixFQUFFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL1V0aWxzL3dlYjNzdG9yYWdlLmpzPzIyOTIiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gU2ltcGxlIElQRlMgc3RvcmFnZSBpbXBsZW1lbnRhdGlvbiB1c2luZyBsb2NhbFN0b3JhZ2Vcbi8vIFRoaXMgaXMgYSBwbGFjZWhvbGRlciBpbXBsZW1lbnRhdGlvbiB0aGF0IGRvZXNuJ3QgYWN0dWFsbHkgc3RvcmUgZGF0YSBvbiBJUEZTXG4vLyBJbiBhIHByb2R1Y3Rpb24gZW52aXJvbm1lbnQsIHlvdSB3b3VsZCB1c2UgYSByZWFsIElQRlMgc2VydmljZVxuXG4vLyBGdW5jdGlvbiB0byB1cGxvYWQgZGF0YSB0byBJUEZTIChtb2NrIGltcGxlbWVudGF0aW9uKVxuZXhwb3J0IGNvbnN0IHVwbG9hZFRvSVBGUyA9IGFzeW5jIChkYXRhKSA9PiB7XG4gIHRyeSB7XG4gICAgLy8gR2VuZXJhdGUgYSB1bmlxdWUgQ0lELWxpa2UgaWRlbnRpZmllclxuICAgIGNvbnN0IG1vY2tDSUQgPSBgbW9jay0ke0RhdGUubm93KCl9LSR7TWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyaW5nKDIsIDE1KX1gO1xuICAgIFxuICAgIC8vIFN0b3JlIHRoZSBkYXRhIGluIGxvY2FsU3RvcmFnZSBmb3IgcmV0cmlldmFsXG4gICAgY29uc3Qgc3RvcmVkRGF0YSA9IHtcbiAgICAgIGNpZDogbW9ja0NJRCxcbiAgICAgIHRpbWVzdGFtcDogRGF0ZS5ub3coKSxcbiAgICAgIGRhdGE6IGRhdGFcbiAgICB9O1xuICAgIFxuICAgIC8vIEdldCBleGlzdGluZyBzdG9yZWQgQ0lEcyBvciBpbml0aWFsaXplIGVtcHR5IGFycmF5XG4gICAgY29uc3Qgc3RvcmVkQ0lEcyA9IEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0oJ2lwZnNfY2lkcycpIHx8ICdbXScpO1xuICAgIHN0b3JlZENJRHMucHVzaChzdG9yZWREYXRhKTtcbiAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnaXBmc19jaWRzJywgSlNPTi5zdHJpbmdpZnkoc3RvcmVkQ0lEcykpO1xuICAgIFxuICAgIGNvbnNvbGUubG9nKGBEYXRhIHN0b3JlZCBsb2NhbGx5IHdpdGggSUQ6ICR7bW9ja0NJRH1gKTtcbiAgICBjb25zb2xlLmxvZyhgVmlldyB5b3VyIGRhdGEgaW4gdGhlIFwiU3RvcmVkIElQRlMgRGF0YVwiIHNlY3Rpb25gKTtcbiAgICBcbiAgICAvLyBSZXR1cm4gdGhlIENJRFxuICAgIHJldHVybiBtb2NrQ0lEO1xuICAgIFxuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ1VwbG9hZCBmYWlsZWQ6JywgZXJyb3IpO1xuICAgIHRocm93IG5ldyBFcnJvcignU3RvcmFnZSBlcnJvcjogJyArIGVycm9yLm1lc3NhZ2UpO1xuICB9XG59O1xuXG4vLyBGdW5jdGlvbiB0byBmZXRjaCBkYXRhIGZyb20gSVBGUyAobW9jayBpbXBsZW1lbnRhdGlvbilcbmV4cG9ydCBjb25zdCBmZXRjaEZyb21JUEZTID0gYXN5bmMgKGNpZCkgPT4ge1xuICB0cnkge1xuICAgIC8vIEdldCBmcm9tIGxvY2FsU3RvcmFnZVxuICAgIGNvbnN0IHN0b3JlZENJRHMgPSBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdpcGZzX2NpZHMnKSB8fCAnW10nKTtcbiAgICBjb25zdCBzdG9yZWREYXRhID0gc3RvcmVkQ0lEcy5maW5kKGl0ZW0gPT4gaXRlbS5jaWQgPT09IGNpZCk7XG4gICAgXG4gICAgaWYgKCFzdG9yZWREYXRhKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0RhdGEgbm90IGZvdW5kJyk7XG4gICAgfVxuICAgIFxuICAgIGNvbnNvbGUubG9nKGBEYXRhIHJldHJpZXZlZCBmcm9tIGxvY2FsIHN0b3JhZ2UgZm9yIElEOiAke2NpZH1gKTtcbiAgICByZXR1cm4gc3RvcmVkRGF0YS5kYXRhO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ0ZldGNoIGVycm9yOicsIGVycm9yKTtcbiAgICB0aHJvdyBlcnJvcjtcbiAgfVxufTtcblxuLy8gRnVuY3Rpb24gdG8gbGlzdCBhbGwgc3RvcmVkIENJRHNcbmV4cG9ydCBjb25zdCBsaXN0U3RvcmVkQ0lEcyA9ICgpID0+IHtcbiAgdHJ5IHtcbiAgICBjb25zdCBzdG9yZWRDSURzID0gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnaXBmc19jaWRzJykgfHwgJ1tdJyk7XG4gICAgcmV0dXJuIHN0b3JlZENJRHMubWFwKGl0ZW0gPT4gKHtcbiAgICAgIGNpZDogaXRlbS5jaWQsXG4gICAgICB0aW1lc3RhbXA6IGl0ZW0udGltZXN0YW1wLFxuICAgICAgZGF0ZTogbmV3IERhdGUoaXRlbS50aW1lc3RhbXApLnRvTG9jYWxlU3RyaW5nKClcbiAgICB9KSk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcignRXJyb3IgbGlzdGluZyBDSURzOicsIGVycm9yKTtcbiAgICByZXR1cm4gW107XG4gIH1cbn07Il0sIm5hbWVzIjpbInVwbG9hZFRvSVBGUyIsImRhdGEiLCJtb2NrQ0lEIiwiTWF0aCIsIkRhdGUiLCJub3ciLCJyYW5kb20iLCJ0b1N0cmluZyIsInN1YnN0cmluZyIsInN0b3JlZERhdGEiLCJjaWQiLCJ0aW1lc3RhbXAiLCJzdG9yZWRDSURzIiwiSlNPTiIsInBhcnNlIiwibG9jYWxTdG9yYWdlIiwiZ2V0SXRlbSIsInB1c2giLCJzZXRJdGVtIiwic3RyaW5naWZ5IiwiY29uc29sZSIsImxvZyIsImVycm9yIiwiRXJyb3IiLCJtZXNzYWdlIiwiZmV0Y2hGcm9tSVBGUyIsImZpbmQiLCJpdGVtIiwibGlzdFN0b3JlZENJRHMiLCJtYXAiLCJkYXRlIiwidG9Mb2NhbGVTdHJpbmciXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./Utils/web3storage.js\n"));

/***/ })

});